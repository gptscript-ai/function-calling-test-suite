[
    {
        "description": "Asserts that the model can derive and make a function call with one argument from a prompt and conveys the result to the user",
        "categories": [
            "basic",
            "semantic"
        ],
        "prompt": "Get the current weather for Cupertino, CA",
        "available_functions": [
            {
                "name": "get_current_weather",
                "description": "Returns the current weather for a given location",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather for, e.g. San Francisco, CA"
                        }
                    }
                },
                "required": [
                    "location"
                ]
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_weather",
                "arguments": {
                    "location": "Cupertino, CA"
                },
                "result": "Sunny, 75 degrees"
            }
        ],
        "final_answer_should": "The answer should indicate that the current weather for Cupertino, CA is Sunny and 75 degrees"
    },
    {
        "description": "Asserts that the model can derive and make a function call with two arguments from a prompt and conveys the result to the user",
        "categories": [
            "basic",
            "semantic"
        ],
        "prompt": "Get the current weather in celsius for Charleston, SC",
        "available_functions": [
            {
                "name": "get_current_weather",
                "description": "Get the current weather for a given location in celsius or fahrenheit",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather for, e.g. San Francisco, CA"
                        },
                        "unit": {
                            "type": "string",
                            "enum": [
                                "celsius",
                                "fahrenheit"
                            ]
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_weather",
                "arguments": {
                    "location": "Charleston, SC",
                    "unit": "celsius"
                },
                "result": "Sunny, 24 degrees"
            }
        ],
        "final_answer_should": "The answer should indicate that the current weather for Charleston, SC is Sunny and 24 degrees"
    },
    {
        "description": "Asserts that the model can derive and make an ordered sequence of function calls from a prompt and conveys the results to the user",
        "categories": [
            "sequenced",
            "semantic"
        ],
        "prompt": "Get the current weather for Fort Myers, FL, then get the current time at Phoenix, AZ",
        "available_functions": [
            {
                "name": "get_current_weather",
                "description": "Get the current weather for a given location",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather for, e.g. San Francisco, CA"
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            },
            {
                "name": "get_current_time",
                "description": "Get the current time at a given location",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get the current time at, e.g. San Francisco, CA"
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_weather",
                "arguments": {
                    "location": "Fort Myers, FL"
                },
                "result": "Sunny, 75 degrees"
            },
            {
                "name": "get_current_time",
                "arguments": {
                    "location": "Phoenix, AZ"
                },
                "result": "14:30"
            }
        ],
        "final_response_should": "The answer should indicate that the current weather in Fort Myers is Sunny, 75 degrees and that the current time at Phoenix is 14:30"
    },
    {
        "description": "Asserts that the model can derive and make two function calls from the prompt, using the result of the first call as the argument for the second, and convey the result to the user",
        "categories": [
            "chained",
            "semantic"
        ],
        "prompt": "Get the current weather for Austin, TX and then tell me if that weather is hot",
        "available_functions": [
            {
                "name": "get_current_weather",
                "description": "Get the current weather in a given location",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather for, e.g. San Francisco, CA"
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            },
            {
                "name": "is_it_hot",
                "description": "Determines if the given weather is hot or cold",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "weather": {
                            "type": "string",
                            "description": "The weather conditions to assess, e.g. Cloudy, 40 degrees"
                        }
                    },
                    "required": [
                        "weather"
                    ]
                }
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_weather",
                "arguments": {
                    "location": "Austin, TX"
                },
                "result": "Sunny, 75 degrees"
            },
            {
                "name": "is_it_hot",
                "arguments": {
                    "weather": "Sunny, 75 degrees"
                },
                "result": "hot"
            }
        ],
        "final_answer_should": "The answer should indicate that the current weather for Austin is Sunny, 75 degrees, and is hot"
    },
    {
        "description": "Asserts that the model can derive and make a series of functions calls from a prompt, where the results of an initial group of calls are used as arguments for a final function call, and conveys the result to the user",
        "categories": [
            "chained",
            "semantic"
        ],
        "prompt": "Get the current date at Atlantic City, NJ, then get the weather conditions there on the current date, then determine if those weather conditions are hot",
        "available_functions": [
            {
                "name": "get_current_date",
                "description": "Gets the current date at the given location. Results are in ISO 8601 date format; e.g. 2024-04-25",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get the current date at, e.g. San Francisco, CA"
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            },
            {
                "name": "get_weather_conditions",
                "description": "Get the weather conditions for a given location on a given date",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather conditions for, e.g. San Francisco, CA"
                        },
                        "date": {
                            "type": "string",
                            "description": "The date in ISO 8601 format to get weather conditions on; e.g. 2024-05-18"
                        }
                    },
                    "required": [
                        "location",
                        "date"
                    ]
                }
            },
            {
                "name": "is_it_hot",
                "description": "Determines if the given weather conditions are hot. Results are either \"hot\" or \"cold\".",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "weather_conditions": {
                            "type": "string",
                            "description": "The weather conditions to assess, e.g. Cloudy, 40 degrees"
                        }
                    },
                    "required": [
                        "weather_conditions"
                    ]
                }
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_date",
                "arguments": {
                    "location": "Atlantic City, NJ"
                },
                "result": "2024-05-18"
            },
            {
                "name": "get_weather_conditions",
                "arguments": {
                    "location": "Atlantic City, NJ",
                    "date": "2024-05-18"
                },
                "result": "Sunny, 75 degrees"
            },
            {
                "name": "is_it_hot",
                "arguments": {
                    "weather_conditions": "Sunny, 75 degrees"
                },
                "result": "hot"
            }
        ],
        "final_answer_should": "The answer should indicate that weather conditions on the current date for Atlantic City, NJ are Sunny, 75 degrees, and hot. The answer can additionally indicate a single date of 2024-05-18, but no other specific dates may be mentioned"
    },
    {
    "description": "Asserts that the model can interpret and execute a complex series of chained steps related to creating a database and creating entries in it.",
    "categories": [
        "chained",
        "semantic"
    ],
    "prompt": "Perform the following actions in order. Do not move on to the next step until you've completed the previous.\n\n1. Start the database.\n2. Create a collection called `headlines` in the database.\n3. Read the file headlines.md\n4. Write each headline into the database collection that you created earlier called `headlines`. Write each one using a separate call to the  database_create_entry tool. Let me know when you've finished and if you were successful.",
    "available_functions": [
        {
            "name": "database_start",
            "description": "Starts the database",
            "parameters": {
                "type": "object",
                "properties": {}
            }
        },
        {
            "name": "database_create_collection",
            "description": "Create a collection in the database",
            "parameters": {
                "type": "object",
                "properties": {
                    "collection": {
                        "type": "string",
                        "description": "The name of the collection"
                    }
                }
            }
        },
        {
            "name": "database_create_entry",
            "description": "Create an entry in the specified collection in the database",
            "parameters": {
                "type": "object",
                "properties": {
                    "collectionName": {
                        "type": "string",
                        "description": "The name of the collection to add the entry to"
                    },
                    "entryValue": {
                        "type": "string",
                        "description": "The entry to insert into the collection"
                    }
                }
            }
        },
        {
            "name": "read_file",
            "description": "Reads the contents of a file",
            "parameters": {
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string",
                        "description": "The name of the file to read"
                    }
                }
            }
        }
    ],
    "expected_function_calls": [
        {
            "name": "database_start",
            "arguments": {},
            "result": ""
        },
        {
            "name": "database_create_collection",
            "arguments": {
                "collection": "headlines"
            },
            "result": ""
        },
        {
            "name": "read_file",
            "arguments": {
                "filename": "headlines.md"
            },
            "result": "Lighting the Way: Thomas Edison Patents the Electric Light Bulb in 1879\nBreaking Barriers: The Wright Brothers Achieve First Powered Flight in 1903\nConnecting the World: Alexander Graham Bell Invents the Telephone in 1876"
        },
        {
            "name": "database_create_entry",
            "arguments": {
                "collectionName": "headlines",
                "entryValue": "Lighting the Way: Thomas Edison Patents the Electric Light Bulb in 1879"
            },
            "result": ""
        },
        {
            "name": "database_create_entry",
            "arguments": {
                "collectionName": "headlines",
                "entryValue": "Breaking Barriers: The Wright Brothers Achieve First Powered Flight in 1903"
            },
            "result": ""
        },
        {
            "name": "database_create_entry",
            "arguments": {
                "collectionName": "headlines",
                "entryValue": "Connecting the World: Alexander Graham Bell Invents the Telephone in 1876"
            },
            "result": ""
        }
    ],
    "final_answer_should": "The answer should indicate that the task was completed successfully."
},
    {
        "description": "Asserts that the model can parse a large csv style response and make subsequent calls for each row in the csv",
        "categories": [
            "chained",
            "semantic"
        ],
        "prompt": "perform the following steps in order:\n1. Create a leads collection named `new leads` and remember the id for future steps.\n2. Retrieve the list of potential sales leads\n3. For each add them to our system.\n4. For each send an initial contact email.\n5. For each assign a sales rep\n6.Ring the new leads bell",

        "available_functions": [
            {
                "name": "create_leads_collection",
                "description": "Create a leads collection. Returns the collection id",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the leads collection"
                        }
                    }
                }
            },
            {
                "name": "sales_leads",
                "description": "Returns a list of potential sales leads",
                "parameters": {
                    "type": "object",
                    "properties": {}
                }
            },
            {
                "name": "add_to_system",
                "description": "Add the contact to our system.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "collection_id": {
                            "type": "string",
                            "description": "The id of the leads collection to add this contact to"
                        },
                        "email": {
                            "type": "string",
                            "description": "The email address to add to our system"
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the contact to add to our system"
                        }
                    }
                }
            },
            {
                "name": "send_initial_email",
                "description": "Send an initial contact email to the specified contact.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "contactId": {
                            "type": "string",
                            "description": "The id of the contact to send the initial email to"
                        }
                    }
                }
            },
            {
                "name": "assign_sales_rep",
                "description": "Assign a sales rep to the contact specified by the email.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "contactId": {
                            "type": "string",
                            "description": "The id of the contact to assign the sales rep to"
                        }
                    }
                }
            },
            {
                "name": "ring_bell",
                "description": "Ring the new leads bell",
                "parameters": {
                    "type": "object",
                    "properties": {}
                }
            }
        ],
        "expected_function_calls": [
            {"name": "create_leads_collection","arguments": {"name": "new leads"},"result": "c1"},
            {
                "name": "sales_leads",
                "arguments": {},
                "result": "John Doe,johndoe@example.com\nJane Smith,janesmith@example.com\nAlice Johnson,alicej@example.com\nBob Brown,bobb@example.com\nChris Green,chrisg@example.com\nNancy White,nancyw@example.com\nDavid Hill,davidh@example.com\nSara Miller,saram@example.com\nMike Wilson,mikew@example.com\nCarla Gomez,carlag@example.com"
            },
            {"name": "add_to_system","arguments": {"collection_id":"c1", "email": "johndoe@example.com","name": "John Doe"},"result": "1asd"},
{"name": "add_to_system","arguments": {"collection_id":"c1", "email": "janesmith@example.com","name": "Jane Smith"},"result": "2asd"},
{"name": "add_to_system","arguments": {"collection_id":"c1", "email": "alicej@example.com","name": "Alice Johnson"},"result": "3asd"},
{"name": "add_to_system","arguments": {"collection_id":"c1", "email": "bobb@example.com","name": "Bob Brown"},"result": "4asd"},
{"name": "add_to_system","arguments": {"collection_id":"c1", "email": "chrisg@example.com","name": "Chris Green"},"result": "5asd"},
{"name": "add_to_system","arguments": {"collection_id":"c1", "email": "nancyw@example.com","name": "Nancy White"},"result": "6asd"},
{"name": "add_to_system","arguments": {"collection_id":"c1", "email": "davidh@example.com","name": "David Hill"},"result": "7asd"},
{"name": "add_to_system","arguments": {"collection_id":"c1", "email": "saram@example.com","name": "Sara Miller"},"result": "8asd"},
{"name": "add_to_system","arguments": {"collection_id":"c1", "email": "mikew@example.com","name": "Mike Wilson"},"result": "9asd"},
{"name": "add_to_system","arguments": {"collection_id":"c1", "email": "carlag@example.com","name": "Carla Gomez"},"result": "10asd"},

            {"name": "send_initial_email","arguments": {"contactId": "1asd"},"result": ""},
            {"name": "send_initial_email","arguments": {"contactId": "2asd"},"result": ""},
            {"name": "send_initial_email","arguments": {"contactId": "3asd"},"result": ""},
            {"name": "send_initial_email","arguments": {"contactId": "4asd"},"result": ""},
            {"name": "send_initial_email","arguments": {"contactId": "5asd"},"result": ""},
            {"name": "send_initial_email","arguments": {"contactId": "6asd"},"result": ""},
            {"name": "send_initial_email","arguments": {"contactId": "7asd"},"result": ""},
            {"name": "send_initial_email","arguments": {"contactId": "8asd"},"result": ""},
            {"name": "send_initial_email","arguments": {"contactId": "9asd"},"result": ""},
            {"name": "send_initial_email","arguments": {"contactId": "10asd"},"result": ""},

            {"name": "assign_sales_rep","arguments": {"contactId": "1asd"},"result": ""},
            {"name": "assign_sales_rep","arguments": {"contactId": "2asd"},"result": ""},
            {"name": "assign_sales_rep","arguments": {"contactId": "3asd"},"result": ""},
            {"name": "assign_sales_rep","arguments": {"contactId": "4asd"},"result": ""},
            {"name": "assign_sales_rep","arguments": {"contactId": "5asd"},"result": ""},
            {"name": "assign_sales_rep","arguments": {"contactId": "6asd"},"result": ""},
            {"name": "assign_sales_rep","arguments": {"contactId": "7asd"},"result": ""},
            {"name": "assign_sales_rep","arguments": {"contactId": "8asd"},"result": ""},
            {"name": "assign_sales_rep","arguments": {"contactId": "9asd"},"result": ""},
            {"name": "assign_sales_rep","arguments": {"contactId": "10asd"},"result": ""},

            {"name": "ring_bell","arguments": {},"result": "ding ding"}

        ],
        "final_answer_should": "The final answer doesn't need to say anything in particular."
    }
]