[
    {
        "description": "Asserts that the model can derive and make a function call with one argument from a prompt and conveys the result to the user",
        "categories": [
            "basic",
            "semantic"
        ],
        "prompt": "Get the current weather for Cupertino, CA",
        "available_functions": [
            {
                "name": "get_current_weather",
                "description": "Returns the current weather for a given location",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather for, e.g. San Francisco, CA"
                        }
                    }
                },
                "required": [
                    "location"
                ]
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_weather",
                "arguments": {
                    "location": "Cupertino, CA"
                },
                "result": "Sunny, 75 degrees"
            }
        ],
        "final_answer_should": "The answer should indicate that the current weather for Cupertino, CA is Sunny and 75 degrees"
    },
    {
        "description": "Asserts that the model can derive and make a function call with two arguments from a prompt and conveys the result to the user",
        "categories": [
            "basic",
            "semantic"
        ],
        "prompt": "Get the current weather in celsius for Charleston, SC",
        "available_functions": [
            {
                "name": "get_current_weather",
                "description": "Get the current weather for a given location in celsius or fahrenheit",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather for, e.g. San Francisco, CA"
                        },
                        "unit": {
                            "type": "string",
                            "enum": [
                                "celsius",
                                "fahrenheit"
                            ]
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_weather",
                "arguments": {
                    "location": "Charleston, SC",
                    "unit": "celsius"
                },
                "result": "Sunny, 24 degrees"
            }
        ],
        "final_answer_should": "The answer should indicate that the current weather for Charleston, SC is Sunny and 24 degrees"
    },
    {
        "description": "Asserts that the model can derive and make an ordered sequence of function calls from a prompt and conveys the results to the user",
        "categories": [
            "sequenced",
            "semantic"
        ],
        "prompt": "Get the current weather for Fort Myers, FL, then get the current time at Phoenix, AZ",
        "available_functions": [
            {
                "name": "get_current_weather",
                "description": "Get the current weather for a given location",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather for, e.g. San Francisco, CA"
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            },
            {
                "name": "get_current_time",
                "description": "Get the current time at a given location",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get the current time at, e.g. San Francisco, CA"
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_weather",
                "arguments": {
                    "location": "Fort Myers, FL"
                },
                "result": "Sunny, 75 degrees"
            },
            {
                "name": "get_current_time",
                "arguments": {
                    "location": "Phoenix, AZ"
                },
                "result": "14:30"
            }
        ],
        "final_response_should": "The answer should indicate that the current weather in Fort Myers is Sunny, 75 degrees and that the current time at Phoenix is 14:30"
    },
    {
        "description": "Asserts that the model can derive and make two function calls from the prompt, using the result of the first call as the argument for the second, and convey the result to the user",
        "categories": [
            "chained",
            "semantic"
        ],
        "prompt": "Get the current weather for Austin, TX and then tell me if that weather is hot",
        "available_functions": [
            {
                "name": "get_current_weather",
                "description": "Get the current weather in a given location",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather for, e.g. San Francisco, CA"
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            },
            {
                "name": "is_it_hot",
                "description": "Determines if the given weather is hot or cold",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "weather": {
                            "type": "string",
                            "description": "The weather conditions to assess, e.g. Cloudy, 40 degrees"
                        }
                    },
                    "required": [
                        "weather"
                    ]
                }
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_weather",
                "arguments": {
                    "location": "Austin, TX"
                },
                "result": "Sunny, 75 degrees"
            },
            {
                "name": "is_it_hot",
                "arguments": {
                    "weather": "Sunny, 75 degrees"
                },
                "result": "hot"
            }
        ],
        "final_answer_should": "The answer should indicate that the current weather for Austin is Sunny, 75 degrees, and is hot"
    },
    {
        "description": "Asserts that the model can derive and make a series of functions calls from a prompt, where the results of an initial group of calls are used as arguments for a final function call, and conveys the result to the user",
        "categories": [
            "chained",
            "semantic"
        ],
        "prompt": "Get the current date at Atlantic City, NJ, then get the weather conditions there on the current date, then determine if those weather conditions are hot",
        "available_functions": [
            {
                "name": "get_current_date",
                "description": "Gets the current date at the given location. Results are in ISO 8601 date format; e.g. 2024-04-25",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get the current date at, e.g. San Francisco, CA"
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            },
            {
                "name": "get_weather_conditions",
                "description": "Get the weather conditions for a given location on a given date",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state to get weather conditions for, e.g. San Francisco, CA"
                        },
                        "date": {
                            "type": "string",
                            "description": "The date in ISO 8601 format to get weather conditions on; e.g. 2024-05-18"
                        }
                    },
                    "required": [
                        "location",
                        "date"
                    ]
                }
            },
            {
                "name": "is_it_hot",
                "description": "Determines if the given weather conditions are hot. Results are either \"hot\" or \"cold\".",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "weather_conditions": {
                            "type": "string",
                            "description": "The weather conditions to assess, e.g. Cloudy, 40 degrees"
                        }
                    },
                    "required": [
                        "weather_conditions"
                    ]
                }
            }
        ],
        "expected_function_calls": [
            {
                "name": "get_current_date",
                "arguments": {
                    "location": "Atlantic City, NJ"
                },
                "result": "2024-05-18"
            },
            {
                "name": "get_weather_conditions",
                "arguments": {
                    "location": "Atlantic City, NJ",
                    "date": "2024-05-18"
                },
                "result": "Sunny, 75 degrees"
            },
            {
                "name": "is_it_hot",
                "arguments": {
                    "weather_conditions": "Sunny, 75 degrees"
                },
                "result": "hot"
            }
        ],
        "final_answer_should": "The answer should indicate that weather conditions on the current date for Atlantic City, NJ are Sunny, 75 degrees, and hot. The answer can additionally indicate a single date of 2024-05-18, but no other specific dates may be mentioned"
    },
    {
        "description": "Asserts that the model can use the results of a group of function calls as arguments for successive groups of function calls and conveys the result to the user",
        "categories": [
            "chained",
            "grouped"
        ],
        "prompt": "",
        "available_functions": [
            {
                "name": "find",
                "description": "Traverse a directory looking for files that match a pattern in the style of the unix find command",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "directory": {
                            "type": "string",
                            "description": "The directory to search in. The current directory \".\" will be used as the default if no argument is passed"
                        },
                        "pattern": {
                            "type": "string",
                            "description": "The file pattern to look for. The pattern is a traditional unix glob format with * matching any character and ? matching a single character"
                        }
                    }
                }
            },
            {
                "name": "count",
                "description": "Count the lines of code",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "file": {
                            "type": "string",
                            "description": "The file to read and count"
                        }
                    }
                }
            },
            {
                "name": "add",
                "description": "Sum a bunch of numbers",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "nums": {
                            "type": "string",
                            "description": "A comma separated list of numbers"
                        }
                    }
                }
            }
        ],
        "expected_function_calls": [
            {
                "name": "find",
                "arguments": {
                    "directory": ".",
                    "pattern": "*.go"
                },
                "result": "main.go\npkg/assemble/assemble.go\npkg/builtin/builtin.go\npkg/builtin/defaults.go\npkg/builtin/log.go\npkg/cache/cache.go\npkg/chat/chat.go\npkg/chat/readline.go\npkg/cli/credential.go\npkg/cli/credential_delete.go\npkg/cli/eval.go\npkg/cli/fmt.go\npkg/cli/gptscript.go\npkg/cli/log.go\npkg/cli/parse.go\npkg/config/cliconfig.go\npkg/confirm/confirm.go\npkg/context/context.go\npkg/credentials/credential.go\npkg/credentials/helper.go\npkg/credentials/store.go\npkg/daemon/daemon.go\npkg/debugcmd/debug.go\npkg/debugcmd/log.go\npkg/engine/cmd.go\npkg/engine/daemon.go\npkg/engine/engine.go\npkg/engine/http.go\npkg/engine/log.go\npkg/engine/openapi.go\npkg/engine/openapi_test.go\npkg/engine/print.go\npkg/engine/self.go\npkg/engine/self_linux.go\npkg/env/env.go\npkg/env/log.go\npkg/gptscript/gptscript.go\npkg/hash/seed.go\npkg/hash/sha256.go\npkg/input/input.go\npkg/input/log.go\npkg/llm/registry.go\npkg/loader/github/github.go\npkg/loader/loader.go\npkg/loader/loader_test.go\npkg/loader/log.go\npkg/loader/openapi.go\npkg/loader/url.go\npkg/loader/vcs/init.go\npkg/monitor/display.go\npkg/monitor/fd.go\npkg/monitor/log.go\npkg/mvl/log.go\npkg/openai/client.go\npkg/parser/parser.go\npkg/parser/parser_test.go\npkg/remote/remote.go\npkg/repos/download/extract.go\npkg/repos/get.go\npkg/repos/get_test.go\npkg/repos/git/cmd.go\npkg/repos/git/git.go\npkg/repos/git/git_test.go\npkg/repos/git/log.go\npkg/repos/log.go\npkg/repos/runtimes/default.go\npkg/repos/runtimes/golang/golang.go\npkg/repos/runtimes/golang/golang_test.go\npkg/repos/runtimes/golang/log.go\npkg/repos/runtimes/golang/testdata/main.go\npkg/repos/runtimes/node/log.go\npkg/repos/runtimes/node/node.go\npkg/repos/runtimes/node/node_test.go\npkg/repos/runtimes/python/generate/generate.go\npkg/repos/runtimes/python/log.go\npkg/repos/runtimes/python/python.go\npkg/repos/runtimes/python/python_test.go\npkg/runner/credentials.go\npkg/runner/log.go\npkg/runner/monitor.go\npkg/runner/parallel.go\npkg/runner/runner.go\npkg/server/log.go\npkg/server/server.go\npkg/system/prompt.go\npkg/tests/runner_test.go\npkg/tests/tester/runner.go\npkg/types/completion.go\npkg/types/jsonschema.go\npkg/types/log.go\npkg/types/tool.go\npkg/types/toolname.go\npkg/types/toolname_test.go\npkg/version/version.go\nstatic/fs.go"
            },
            {
                "name": "count",
                "arguments": {
                    "file": "foo.py"
                },
                "result": "5"
            },
            {
                "name": "count",
                "arguments": {
                    "file": "bar.py"
                },
                "result": "6"
            },
            {
                "name": "count",
                "arguments": {
                    "file": "baz.py"
                },
                "result": "4"
            },
            {
                "name": "add",
                "arguments": {
                    "nums": "5,6,4"
                },
                "result": "15"
            }
        ],
        "final_answer_should": "The answer should indicate that the total number of lines is 15"
    }
]