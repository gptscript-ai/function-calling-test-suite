---
description: Asserts that the model can derive and make a function call with one argument from a prompt and conveys the result to the user
categories:
  - basic
  - semantic
prompt: Get the current weather for Cupertino, CA
available_functions:
  - name: get_current_weather
    description: Returns the current weather for a given location
    parameters:
      type: object
      properties:
        location:
          type: string
          description: The city and state to get weather for, e.g. San Francisco, CA
    required:
      - location
expected_function_calls:
  - name: get_current_weather
    arguments:
      location: Cupertino, CA
    result: Sunny, 75 degrees
final_answer_should: The answer should indicate that the current weather for Cupertino, CA is Sunny and 75 degrees
---
description: Asserts that the model can derive and make a function call with two arguments from a prompt and conveys the result to the user
categories:
  - basic
  - semantic
prompt: Get the current weather in celsius for Charleston, SC
available_functions:
  - name: get_current_weather
    description: Get the current weather for a given location in celsius or fahrenheit
    parameters:
      type: object
      properties:
        location:
          type: string
          description: The city and state to get weather for, e.g. San Francisco, CA
        unit:
          type: string
          enum:
            - celsius
            - fahrenheit
      required:
        - location
expected_function_calls:
  - name: get_current_weather
    arguments:
      location: Charleston, SC
      unit: celsius
    result: Sunny, 24 degrees
final_answer_should: The answer should indicate that the current weather for Charleston, SC is Sunny and 24 degrees
---
description: Asserts that the model can derive and make an ordered sequence of function calls from a prompt and conveys the results to the user
categories:
  - sequenced
  - semantic
prompt: Get the current weather for Fort Myers, FL, then get the current time at Phoenix, AZ
available_functions:
  - name: get_current_weather
    description: Get the current weather for a given location
    parameters:
      type: object
      properties:
        location:
          type: string
          description: The city and state to get weather for, e.g. San Francisco, CA
      required:
        - location
  - name: get_current_time
    description: Get the current time at a given location
    parameters:
      type: object
      properties:
        location:
          type: string
          description: The city and state to get the current time at, e.g. San Francisco, CA
      required:
        - location
expected_function_calls:
  - name: get_current_weather
    arguments:
      location: Fort Myers, FL
    result: Sunny, 75 degrees
  - name: get_current_time
    arguments:
      location: Phoenix, AZ
    result: 14:30
final_response_should: The answer should indicate that the current weather in Fort Myers is Sunny, 75 degrees and that the current time at Phoenix is 14:30
---
description: Asserts that the model can derive and make two function calls from the prompt, using the result of the first call as the argument for the second, and convey the result to the user
categories:
  - chained
  - semantic
prompt: Get the current weather for Austin, TX and then tell me if that weather is hot
available_functions:
  - name: get_current_weather
    description: Get the current weather in a given location
    parameters:
      type: object
      properties:
        location:
          type: string
          description: The city and state to get weather for, e.g. San Francisco, CA
      required:
        - location
  - name: is_it_hot
    description: Determines if the given weather is hot or cold
    parameters:
      type: object
      properties:
        weather:
          type: string
          description: The weather conditions to assess, e.g. 'Cloudy, 40 degrees'
      required:
        - weather
expected_function_calls:
  - name: get_current_weather
    arguments:
      location: Austin, TX
    result: Sunny, 75 degrees
  - name: is_it_hot
    arguments:
      weather: Sunny, 75 degrees
    result: hot
final_answer_should: The answer should indicate that the current weather for Austin is Sunny, 75 degrees, and is hot
---
description: Asserts that the model can derive and make a series of functions calls from a prompt, where the results of an initial group of calls are used as arguments for a final function call, and conveys the result to the user
categories:
  - chained
  - semantic
prompt: Get the current date at Atlantic City, NJ, then get the weather conditions there on the current date, then determine if those weather conditions are hot
available_functions:
  - name: get_current_date
    description: Gets the current date at the given location. Results are in ISO 8601 date format; e.g. 2024-04-25
    parameters:
      type: object
      properties:
        location:
          type: string
          description: The city and state to get the current date at, e.g. San Francisco, CA
      required:
        - location
  - name: get_weather_conditions
    description: Get the weather conditions for a given location on a given date
    parameters:
      type: object
      properties:
        location:
          type: string
          description: The city and state to get weather conditions for, e.g. San Francisco, CA
        date:
          type: string
          description: The date in ISO 8601 format to get weather conditions on; e.g. 2024-05-18
      required:
        - location
        - date
  - name: is_it_hot
    description: Determines if the given weather conditions are hot. Results are either "hot" or "cold".
    parameters:
      type: object
      properties:
        weather_conditions:
          type: string
          description: The weather conditions to assess, e.g. 'Cloudy, 40 degrees'
      required:
        - weather_conditions
expected_function_calls:
  - name: get_current_date
    arguments:
      location: Atlantic City, NJ
    result: "2024-05-18"
  - name: get_weather_conditions
    arguments:
      location: Atlantic City, NJ
      date: "2024-05-18"
    result: Sunny, 75 degrees
  - name: is_it_hot
    arguments:
      weather_conditions: Sunny, 75 degrees
    result: hot
final_answer_should: The answer should indicate that weather conditions on the current date for Atlantic City, NJ are Sunny, 75 degrees, and hot. The answer can additionally indicate a single date of 2024-05-18, but no other specific dates may be mentioned
---
description: Asserts that the model can interpret and execute a complex series of chained steps related to creating a database and creating entries in it.
categories:
  - chained
  - semantic
prompt: |-
  Perform the following actions in order. Do not move on to the next step until you've completed the previous.
  1. Start the database. 2. Create a collection called `headlines` in the database. 3. Read the file headlines.md 4. Write each headline into the database collection that you created earlier called `headlines`. Write each one using a separate call to the  database_create_entry tool. Let me know when you've finished and if you were successful.
available_functions:
  - name: database_start
    description: Starts the database
    parameters:
      type: object
      properties: {}
  - name: database_create_collection
    description: Create a collection in the database
    parameters:
      type: object
      properties:
        collection:
          type: string
          description: The name of the collection
  - name: database_create_entry
    description: Create an entry in the specified collection in the database
    parameters:
      type: object
      properties:
        collectionName:
          type: string
          description: The name of the collection to add the entry to
        entryValue:
          type: string
          description: The entry to insert into the collection
  - name: read_file
    description: Reads the contents of a file
    parameters:
      type: object
      properties:
        filename:
          type: string
          description: The name of the file to read
expected_function_calls:
  - name: database_start
    arguments: {}
    result: ""
  - name: database_create_collection
    arguments:
      collection: headlines
    result: ""
  - name: read_file
    arguments:
      filename: headlines.md
    result: 'Lighting the Way: Thomas Edison Patents the Electric Light Bulb in 1879 Breaking Barriers: The Wright Brothers Achieve First Powered Flight in 1903 Connecting the World: Alexander Graham Bell Invents the Telephone in 1876'
  - name: database_create_entry
    arguments:
      collectionName: headlines
      entryValue: 'Lighting the Way: Thomas Edison Patents the Electric Light Bulb in 1879'
    result: ""
  - name: database_create_entry
    arguments:
      collectionName: headlines
      entryValue: 'Breaking Barriers: The Wright Brothers Achieve First Powered Flight in 1903'
    result: ""
  - name: database_create_entry
    arguments:
      collectionName: headlines
      entryValue: 'Connecting the World: Alexander Graham Bell Invents the Telephone in 1876'
    result: ""
final_answer_should: The answer should indicate that the task was completed successfully.
---
description: Asserts that the model can parse a comma delimited list from one function, pass each entry to a second function, and send the gathered results of those calls to a third function.
categories:
  - chained
  - grouped
  - semantic
prompt: Find all *.go files and count the lines of code in each file, add the result and print it
available_functions:
  - name: find
    description: Traverse a directory looking for files that match a pattern in the style of the unix find command
    parameters:
      type: object
      properties:
        pattern:
          type: string
          description: The file pattern to look for. The pattern is a traditional unix glob format with * matching any character and ? matching a single character
  - name: count
    description: Count the lines of code
    parameters:
      type: object
      properties:
        file:
          type: string
          description: The file to read and count
  - name: add
    description: Sum up a series of comma separated numbers
    parameters:
      type: object
      properties:
        nums:
          type: string
          description: A comma separated list of numbers
expected_function_calls:
  - name: find
    arguments:
      pattern: '*.go'
    result: main.go pkg/assemble/assemble.go pkg/builtin/builtin.go pkg/builtin/defaults.go pkg/builtin/log.go pkg/cache/cache.go pkg/chat/chat.go pkg/chat/readline.go pkg/cli/credential.go pkg/cli/credential_delete.go pkg/cli/eval.go pkg/cli/fmt.go pkg/cli/gptscript.go pkg/cli/log.go pkg/cli/parse.go pkg/config/cliconfig.go pkg/confirm/confirm.go pkg/context/context.go pkg/credentials/credential.go pkg/credentials/helper.go pkg/credentials/store.go pkg/daemon/daemon.go pkg/debugcmd/debug.go pkg/debugcmd/log.go pkg/engine/cmd.go pkg/engine/daemon.go pkg/engine/engine.go pkg/engine/http.go pkg/engine/log.go pkg/engine/openapi.go pkg/engine/openapi_test.go pkg/engine/print.go pkg/engine/self.go pkg/engine/self_linux.go pkg/env/env.go pkg/env/log.go pkg/gptscript/gptscript.go pkg/hash/seed.go pkg/hash/sha256.go pkg/input/input.go pkg/input/log.go pkg/llm/registry.go pkg/loader/github/github.go pkg/loader/loader.go pkg/loader/loader_test.go pkg/loader/log.go pkg/loader/openapi.go pkg/loader/url.go pkg/loader/vcs/init.go pkg/monitor/display.go
  - any_order:
      - arguments:
          file: main.go
        name: count
        result: "10"
      - arguments:
          file: pkg/assemble/assemble.go
        name: count
        result: "10"
      - arguments:
          file: pkg/builtin/builtin.go
        name: count
        result: "10"
      - arguments:
          file: pkg/builtin/defaults.go
        name: count
        result: "10"
      - arguments:
          file: pkg/builtin/log.go
        name: count
        result: "10"
      - arguments:
          file: pkg/cache/cache.go
        name: count
        result: "10"
      - arguments:
          file: pkg/chat/chat.go
        name: count
        result: "10"
      - arguments:
          file: pkg/chat/readline.go
        name: count
        result: "10"
      - arguments:
          file: pkg/cli/credential.go
        name: count
        result: "10"
      - arguments:
          file: pkg/cli/credential_delete.go
        name: count
        result: "10"
      - arguments:
          file: pkg/cli/eval.go
        name: count
        result: "10"
      - arguments:
          file: pkg/cli/fmt.go
        name: count
        result: "10"
      - arguments:
          file: pkg/cli/gptscript.go
        name: count
        result: "10"
      - arguments:
          file: pkg/cli/log.go
        name: count
        result: "10"
      - arguments:
          file: pkg/cli/parse.go
        name: count
        result: "10"
      - arguments:
          file: pkg/config/cliconfig.go
        name: count
        result: "10"
      - arguments:
          file: pkg/confirm/confirm.go
        name: count
        result: "10"
      - arguments:
          file: pkg/context/context.go
        name: count
        result: "10"
      - arguments:
          file: pkg/credentials/credential.go
        name: count
        result: "10"
      - arguments:
          file: pkg/credentials/helper.go
        name: count
        result: "10"
      - arguments:
          file: pkg/credentials/store.go
        name: count
        result: "10"
      - arguments:
          file: pkg/daemon/daemon.go
        name: count
        result: "10"
      - arguments:
          file: pkg/debugcmd/debug.go
        name: count
        result: "10"
      - arguments:
          file: pkg/debugcmd/log.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/cmd.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/daemon.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/engine.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/http.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/log.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/openapi.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/openapi_test.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/print.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/self.go
        name: count
        result: "10"
      - arguments:
          file: pkg/engine/self_linux.go
        name: count
        result: "10"
      - arguments:
          file: pkg/env/env.go
        name: count
        result: "10"
      - arguments:
          file: pkg/env/log.go
        name: count
        result: "10"
      - arguments:
          file: pkg/gptscript/gptscript.go
        name: count
        result: "10"
      - arguments:
          file: pkg/hash/seed.go
        name: count
        result: "10"
      - arguments:
          file: pkg/hash/sha256.go
        name: count
        result: "10"
      - arguments:
          file: pkg/input/input.go
        name: count
        result: "10"
      - arguments:
          file: pkg/input/log.go
        name: count
        result: "10"
      - arguments:
          file: pkg/llm/registry.go
        name: count
        result: "10"
      - arguments:
          file: pkg/loader/github/github.go
        name: count
        result: "10"
      - arguments:
          file: pkg/loader/loader.go
        name: count
        result: "10"
      - arguments:
          file: pkg/loader/loader_test.go
        name: count
        result: "10"
      - arguments:
          file: pkg/loader/log.go
        name: count
        result: "10"
      - arguments:
          file: pkg/loader/openapi.go
        name: count
        result: "10"
      - arguments:
          file: pkg/loader/url.go
        name: count
        result: "10"
      - arguments:
          file: pkg/loader/vcs/init.go
        name: count
        result: "10"
      - arguments:
          file: pkg/monitor/display.go
        name: count
        result: "10"
  - name: add
    arguments:
      nums: 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
    result: "500"
final_answer_should: The answer should indicate that the total number of lines is 500
---
description: Asserts that the model can parse a large csv style response and make a series of chained calls for each row in the csv
categories:
  - chained
  - semantic
prompt: Retrieve the list of potential sales leads and for each add them to our system. Then, send an initial contact email to each lead. Finally, assign a sales rep to each lead.
available_functions:
  - name: sales_leads
    description: Returns a list of potential sales leads
    parameters:
      type: object
      properties: {}
  - name: add_to_system
    description: Add the contact to our system.
    parameters:
      type: object
      properties:
        email:
          type: string
          description: The email address to add to our system
        name:
          type: string
          description: The name of the contact to add to our system
  - name: send_initial_email
    description: Send an initial contact email to the specified contact.
    parameters:
      type: object
      properties:
        contactId:
          type: string
          description: The id of the contact to send the initial email to
  - name: assign_sales_rep
    description: Assign a sales rep to the contact specified by the email.
    parameters:
      type: object
      properties:
        contactId:
          type: string
          description: The id of the contact to assign the sales rep to
expected_function_calls:
  - name: sales_leads
    arguments: {}
    result: John Doe,johndoe@example.com Jane Smith,janesmith@example.com Alice Johnson,alicej@example.com Bob Brown,bobb@example.com Chris Green,chrisg@example.com Nancy White,nancyw@example.com David Hill,davidh@example.com Sara Miller,saram@example.com Mike Wilson,mikew@example.com Carla Gomez,carlag@example.com
  - any_order:
      - name: add_to_system
        arguments:
          email: johndoe@example.com
          name: John Doe
        result: 1asd
      - name: add_to_system
        arguments:
          email: janesmith@example.com
          name: Jane Smith
        result: 2asd
      - name: add_to_system
        arguments:
          email: alicej@example.com
          name: Alice Johnson
        result: 3asd
      - name: add_to_system
        arguments:
          email: bobb@example.com
          name: Bob Brown
        result: 4asd
      - name: add_to_system
        arguments:
          email: chrisg@example.com
          name: Chris Green
        result: 5asd
      - name: add_to_system
        arguments:
          email: nancyw@example.com
          name: Nancy White
        result: 6asd
      - name: add_to_system
        arguments:
          email: davidh@example.com
          name: David Hill
        result: 7asd
      - name: add_to_system
        arguments:
          email: saram@example.com
          name: Sara Miller
        result: 8asd
      - name: add_to_system
        arguments:
          email: mikew@example.com
          name: Mike Wilson
        result: 9asd
      - name: add_to_system
        arguments:
          email: carlag@example.com
          name: Carla Gomez
        result: 10asd
      - name: send_initial_email
        arguments:
          contactId: 1asd
        result: ""
      - name: send_initial_email
        arguments:
          contactId: 2asd
        result: ""
      - name: send_initial_email
        arguments:
          contactId: 3asd
        result: ""
      - name: send_initial_email
        arguments:
          contactId: 4asd
        result: ""
      - name: send_initial_email
        arguments:
          contactId: 5asd
        result: ""
      - name: send_initial_email
        arguments:
          contactId: 6asd
        result: ""
      - name: send_initial_email
        arguments:
          contactId: 7asd
        result: ""
      - name: send_initial_email
        arguments:
          contactId: 8asd
        result: ""
      - name: send_initial_email
        arguments:
          contactId: 9asd
        result: ""
      - name: send_initial_email
        arguments:
          contactId: 10asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 1asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 2asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 3asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 4asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 5asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 6asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 7asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 8asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 9asd
        result: ""
      - name: assign_sales_rep
        arguments:
          contactId: 10asd
        result: ""
